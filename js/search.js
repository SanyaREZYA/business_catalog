document.addEventListener('DOMContentLoaded', function () {
  // –ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—ó:
  const nameInput = document.querySelector('.input-group input[type="search"]');
  const nameButton = document.querySelector('.input-group button');
  
  // –ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ —Ç–µ–≥—É:
  const tagInput = document.querySelector('.tag-search input[type="text"]');
  const tagButton = document.querySelector('.tag-search button');

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—ñ–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–±–æ—Ö –≤–∏–¥—ñ–≤ –ø–æ—à—É–∫—É
  if (nameInput && nameButton) {
    nameButton.addEventListener('click', () => searchCombined(nameInput.value));
    nameInput.addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        searchCombined(nameInput.value);
      }
    });
  }

  if (tagInput && tagButton) {
    tagButton.addEventListener('click', () => searchCombined(tagInput.value));
    tagInput.addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        searchCombined(tagInput.value);
      }
    });
  }
});

function searchCombined(query) {
  if (!query.trim()) return;

  // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤–∞ –∑–∞–ø–∏—Ç–∏: –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ–≥–æ–º
  const searchByName = fetch(`/companies/search/${encodeURIComponent(query)}`)
    .then(res => {
      if (!res.ok) throw new Error('Network response was not ok for company name search');
      return res.json();
    });
    
  const searchByTag = fetch(`/companies-by-tag-name/${encodeURIComponent(query)}`)
    .then(res => {
      if (!res.ok) throw new Error('Network response was not ok for tag search');
      return res.json();
    });

  // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –≤–∏–¥–∞–ª—è—é—á–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–∑–∞ id)
  Promise.all([searchByName, searchByTag])
    .then(([byName, byTag]) => {
      const merged = [];
      const seenIds = new Set();

      [...byName, ...byTag].forEach(company => {
        if (!seenIds.has(company.id)) {
          seenIds.add(company.id);
          merged.push(company);
        }
      });

      renderResults(merged);
    })
    .catch(err => {
      console.error('Combined search error:', err);
      renderError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.');
    });
}

function renderResults(companies) {
  const container = document.querySelector('main .row');
  if (!container) return;

  container.innerHTML = '';

  if (!Array.isArray(companies) || companies.length === 0) {
    container.innerHTML = '<p class="text-muted">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>';
    return;
  }

  companies.forEach(company => {
    const {
      name = '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      category = '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è',
      logo_path = '/images/default.png',
      location = '–ù–µ–≤—ñ–¥–æ–º–æ',
      email = '-',
      website = '#'
    } = company;

    const card = document.createElement('div');
    card.className = 'col-md-3 mb-6';

    card.innerHTML = `
      <div class="card h-100 shadow-sm">
        <div class="badge">${category}</div>
        <img alt="${name}" class="card-img-top" src="${logo_path}">
        <div class="card-body d-flex flex-column">
          <h5 class="card-title">${name}</h5>
          <p class="info-item"><span>üìç</span> ${location}</p>
          <p class="info-item"><span>üìß</span> ${email}</p>
          <p class="info-item"><span>üåê</span> ${website}</p>
          <div class="actions mt-auto d-flex justify-content-between">
            <a class="btn btn-outline-primary btn-sm" href="${website}" target="_blank">–ö–æ–Ω—Ç–∞–∫—Ç–∏</a>
            <a class="btn btn-primary btn-sm" href="#">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>
          </div>
        </div>
      </div>`;
    container.appendChild(card);
  });
}

function renderError(message) {
  const container = document.querySelector('main .row');
  if (container) {
    container.innerHTML = `<p class="text-danger">${message}</p>`;
  }
}
